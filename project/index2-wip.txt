import { Duration, Stack, StackProps } from 'aws-cdk-lib'
import { Repository } from 'aws-cdk-lib/aws-ecr'
import { DockerImageFunction, DockerImageCode } from 'aws-cdk-lib/aws-lambda'
import * as child_process from 'child_process'
import { Construct } from 'constructs'

interface AppStackProps extends StackProps {
  modelName: string
}

export class AppStack extends Stack {
  constructor(scope: Construct, id: string, props: AppStackProps) {
    super(scope, id, props)

    // Build and push Docker image
    const repoName = `ollama-${props.modelName}-repo`
    const imageName = `ollama-${props.modelName}-image`
    const currentTimeUri = Date.now().toString()
    const fullUri = `${repoName}:${currentTimeUri}`

    // console.log('Building Docker image...')
    // const buildResult = child_process.spawnSync('docker', [
    //   'build',
    //   '-t',
    //   imageName,
    //   './',
    //   '--build-arg',
    //   `MODEL_NAME=${props.modelName}`,
    // ])
    // if (buildResult.status !== 0) {
    //   console.error('Error: Docker image failed to build.')
    //   process.exit(1)
    // }

    // console.log('Tagging Docker image...')
    // const tagResult = child_process.spawnSync('docker', [
    //   'tag',
    //   `${imageName}:latest`,
    //   fullUri,
    // ])
    // if (tagResult.status !== 0) {
    //   console.error('Error: Failed to tag Docker image.')
    //   process.exit(1)
    // }

    // console.log('Pushing Docker image to ECR...')
    // const pushResult = child_process.spawnSync('docker', ['push', fullUri])
    // if (pushResult.status !== 0) {
    //   console.error('Error: Failed to push Docker image to ECR.')
    //   process.exit(1)
    // }

    // Create ECR repository
    const repository = new Repository(this, 'MyECRRepository', {
      repositoryName: `ollama-${props.modelName}-repo`,
    })

    // Build and push Docker image to ECR
    const dockerImageAsset = DockerImageCode.fromBuild({
      directory: './path/to/dockerfile', // Specify the directory containing Dockerfile
      repository: repository, // Use IRepository type
      buildArgs: { MODEL_NAME: props.modelName }, // Pass build arguments
    })

    // console.log('ECR push successful')

    // Create Lambda function
    const lambda = new DockerImageFunction(this, 'MyDockerImageFunction', {
      functionName: `ollama_${props.modelName}_runner`,
      memorySize: 10240,
      timeout: Duration.seconds(300),
      code: DockerImageCode.fromEcr(),
      environment: {
        TABLE_NAME: 'TEMP',
        MODEL_NAME: props.modelName,
      },
    })
    console.log(lambda)
  }
}
